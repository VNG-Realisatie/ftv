// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "gitlab.com/digilab.overheid.nl/ecosystem/fsc-vwl-api"
)

// Error The error that occurred while processing this request.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Nationaliteit defines model for Nationaliteit.
type Nationaliteit struct {
	// Id Code of a nationaliteit.
	Id Code `json:"id"`
}

// Code Code of a nationaliteit.
type Code = string

// QueryNaam defines model for queryNaam.
type QueryNaam = string

// BadRequestErrorResponse defines model for BadRequestErrorResponse.
type BadRequestErrorResponse struct {
	Errors []Error `json:"errors"`
}

// NationaiteitenResponse defines model for NationaiteitenResponse.
type NationaiteitenResponse struct {
	Data []Nationaliteit `json:"data"`
}

// FindNationailteitParams defines parameters for FindNationailteit.
type FindNationailteitParams struct {
	// Naam (part of) the name of a nationaliteit.
	Naam *QueryNaam `form:"naam,omitempty" json:"naam,omitempty"`

	// FSCVWLVerwerkingsActiviteit id of the verwerking type
	FSCVWLVerwerkingsActiviteit *externalRef0.FSCVWLVerwerkingsActiviteit `json:"FSC-VWL-Verwerkings-Activiteit,omitempty"`

	// FSCVWLVerwerkingsSpan transaction uuid of the incoming request
	FSCVWLVerwerkingsSpan *externalRef0.FSCVWLVerwerkingsSpan `json:"FSC-VWL-Verwerkings-Span,omitempty"`

	// FSCVWLSysteem identifier for the system processing the verwerking
	FSCVWLSysteem *externalRef0.FSCVWLSysteem `json:"FSC-VWL-Systeem,omitempty"`

	// FSCVWLVerwerker the party doing the verwerking, this does not have to be the party responsible for the verwerking
	FSCVWLVerwerker *externalRef0.FSCVWLVerwerker `json:"FSC-VWL-Verwerker,omitempty"`

	// FSCVWLVerantwoordelijke the party responsible for the verwerking, this does not have to be the party doing the verwerking itself
	FSCVWLVerantwoordelijke *externalRef0.FSCVWLVerantwoordelijke `json:"FSC-VWL-Verantwoordelijke,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// FindNationailteit request
	FindNationailteit(ctx context.Context, params *FindNationailteitParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) FindNationailteit(ctx context.Context, params *FindNationailteitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindNationailteitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewFindNationailteitRequest generates requests for FindNationailteit
func NewFindNationailteitRequest(server string, params *FindNationailteitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nationaliteiten")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Naam != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "naam", runtime.ParamLocationQuery, *params.Naam); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.FSCVWLVerwerkingsActiviteit != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "FSC-VWL-Verwerkings-Activiteit", runtime.ParamLocationHeader, *params.FSCVWLVerwerkingsActiviteit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("FSC-VWL-Verwerkings-Activiteit", headerParam0)
		}

		if params.FSCVWLVerwerkingsSpan != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "FSC-VWL-Verwerkings-Span", runtime.ParamLocationHeader, *params.FSCVWLVerwerkingsSpan)
			if err != nil {
				return nil, err
			}

			req.Header.Set("FSC-VWL-Verwerkings-Span", headerParam1)
		}

		if params.FSCVWLSysteem != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "FSC-VWL-Systeem", runtime.ParamLocationHeader, *params.FSCVWLSysteem)
			if err != nil {
				return nil, err
			}

			req.Header.Set("FSC-VWL-Systeem", headerParam2)
		}

		if params.FSCVWLVerwerker != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "FSC-VWL-Verwerker", runtime.ParamLocationHeader, *params.FSCVWLVerwerker)
			if err != nil {
				return nil, err
			}

			req.Header.Set("FSC-VWL-Verwerker", headerParam3)
		}

		if params.FSCVWLVerantwoordelijke != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "FSC-VWL-Verantwoordelijke", runtime.ParamLocationHeader, *params.FSCVWLVerantwoordelijke)
			if err != nil {
				return nil, err
			}

			req.Header.Set("FSC-VWL-Verantwoordelijke", headerParam4)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// FindNationailteitWithResponse request
	FindNationailteitWithResponse(ctx context.Context, params *FindNationailteitParams, reqEditors ...RequestEditorFn) (*FindNationailteitResponse, error)
}

type FindNationailteitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NationaiteitenResponse
	JSON400      *BadRequestErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindNationailteitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindNationailteitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// FindNationailteitWithResponse request returning *FindNationailteitResponse
func (c *ClientWithResponses) FindNationailteitWithResponse(ctx context.Context, params *FindNationailteitParams, reqEditors ...RequestEditorFn) (*FindNationailteitResponse, error) {
	rsp, err := c.FindNationailteit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindNationailteitResponse(rsp)
}

// ParseFindNationailteitResponse parses an HTTP response from a FindNationailteitWithResponse call
func ParseFindNationailteitResponse(rsp *http.Response) (*FindNationailteitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindNationailteitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NationaiteitenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find nationaliteiten by attributes
	// (GET /nationaliteiten)
	FindNationailteit(w http.ResponseWriter, r *http.Request, params FindNationailteitParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Find nationaliteiten by attributes
// (GET /nationaliteiten)
func (_ Unimplemented) FindNationailteit(w http.ResponseWriter, r *http.Request, params FindNationailteitParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FindNationailteit operation middleware
func (siw *ServerInterfaceWrapper) FindNationailteit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindNationailteitParams

	// ------------- Optional query parameter "naam" -------------

	err = runtime.BindQueryParameter("form", true, false, "naam", r.URL.Query(), &params.Naam)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "naam", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "FSC-VWL-Verwerkings-Activiteit" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("FSC-VWL-Verwerkings-Activiteit")]; found {
		var FSCVWLVerwerkingsActiviteit externalRef0.FSCVWLVerwerkingsActiviteit
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "FSC-VWL-Verwerkings-Activiteit", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "FSC-VWL-Verwerkings-Activiteit", valueList[0], &FSCVWLVerwerkingsActiviteit, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "FSC-VWL-Verwerkings-Activiteit", Err: err})
			return
		}

		params.FSCVWLVerwerkingsActiviteit = &FSCVWLVerwerkingsActiviteit

	}

	// ------------- Optional header parameter "FSC-VWL-Verwerkings-Span" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("FSC-VWL-Verwerkings-Span")]; found {
		var FSCVWLVerwerkingsSpan externalRef0.FSCVWLVerwerkingsSpan
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "FSC-VWL-Verwerkings-Span", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "FSC-VWL-Verwerkings-Span", valueList[0], &FSCVWLVerwerkingsSpan, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "FSC-VWL-Verwerkings-Span", Err: err})
			return
		}

		params.FSCVWLVerwerkingsSpan = &FSCVWLVerwerkingsSpan

	}

	// ------------- Optional header parameter "FSC-VWL-Systeem" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("FSC-VWL-Systeem")]; found {
		var FSCVWLSysteem externalRef0.FSCVWLSysteem
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "FSC-VWL-Systeem", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "FSC-VWL-Systeem", valueList[0], &FSCVWLSysteem, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "FSC-VWL-Systeem", Err: err})
			return
		}

		params.FSCVWLSysteem = &FSCVWLSysteem

	}

	// ------------- Optional header parameter "FSC-VWL-Verwerker" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("FSC-VWL-Verwerker")]; found {
		var FSCVWLVerwerker externalRef0.FSCVWLVerwerker
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "FSC-VWL-Verwerker", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "FSC-VWL-Verwerker", valueList[0], &FSCVWLVerwerker, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "FSC-VWL-Verwerker", Err: err})
			return
		}

		params.FSCVWLVerwerker = &FSCVWLVerwerker

	}

	// ------------- Optional header parameter "FSC-VWL-Verantwoordelijke" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("FSC-VWL-Verantwoordelijke")]; found {
		var FSCVWLVerantwoordelijke externalRef0.FSCVWLVerantwoordelijke
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "FSC-VWL-Verantwoordelijke", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "FSC-VWL-Verantwoordelijke", valueList[0], &FSCVWLVerantwoordelijke, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "FSC-VWL-Verantwoordelijke", Err: err})
			return
		}

		params.FSCVWLVerantwoordelijke = &FSCVWLVerantwoordelijke

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindNationailteit(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nationaliteiten", wrapper.FindNationailteit)
	})

	return r
}

type BadRequestErrorResponseJSONResponse struct {
	Errors []Error `json:"errors"`
}

type NationaiteitenResponseResponseHeaders struct {
	FSCVWLSysteem               string
	FSCVWLVerantwoordelijke     string
	FSCVWLVerwerker             string
	FSCVWLVerwerkingsActiviteit string
	FSCVWLVerwerkingsSpan       openapi_types.UUID
}
type NationaiteitenResponseJSONResponse struct {
	Body struct {
		Data []Nationaliteit `json:"data"`
	}

	Headers NationaiteitenResponseResponseHeaders
}

type FindNationailteitRequestObject struct {
	Params FindNationailteitParams
}

type FindNationailteitResponseObject interface {
	VisitFindNationailteitResponse(w http.ResponseWriter) error
}

type FindNationailteit200JSONResponse struct {
	NationaiteitenResponseJSONResponse
}

func (response FindNationailteit200JSONResponse) VisitFindNationailteitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("FSC-VWL-Systeem", fmt.Sprint(response.Headers.FSCVWLSysteem))
	w.Header().Set("FSC-VWL-Verantwoordelijke", fmt.Sprint(response.Headers.FSCVWLVerantwoordelijke))
	w.Header().Set("FSC-VWL-Verwerker", fmt.Sprint(response.Headers.FSCVWLVerwerker))
	w.Header().Set("FSC-VWL-Verwerkings-Activiteit", fmt.Sprint(response.Headers.FSCVWLVerwerkingsActiviteit))
	w.Header().Set("FSC-VWL-Verwerkings-Span", fmt.Sprint(response.Headers.FSCVWLVerwerkingsSpan))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type FindNationailteit400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response FindNationailteit400JSONResponse) VisitFindNationailteitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find nationaliteiten by attributes
	// (GET /nationaliteiten)
	FindNationailteit(ctx context.Context, request FindNationailteitRequestObject) (FindNationailteitResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// FindNationailteit operation middleware
func (sh *strictHandler) FindNationailteit(w http.ResponseWriter, r *http.Request, params FindNationailteitParams) {
	var request FindNationailteitRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindNationailteit(ctx, request.(FindNationailteitRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindNationailteit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindNationailteitResponseObject); ok {
		if err := validResponse.VisitFindNationailteitResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW224bNxD9FYLNQwustLqlSfRUx00AAa5j2LHzYLjAiJzV0uaSNMmVIxj694LcXd1l",
	"S+gNeeNKnDNnhjNn5pkyXRitUHlHh880R+Bo4/Hz1enNt7OrmfOIRfiBo2NWGC+0okMqOCovMoGWZNoS",
	"nyNx4W5BjNUMnRNqEn+don1C+yDUhCbUsRwLCGj4HQojkQ7peDqlCfUzEz6ct+HmfJ7UBG7QgvJPWluO",
	"Utw/4DaV4MWA9TNi0RmtnBhLXLBa+k+Iz4UjXKMjSnuSwxSJ12SMZAnB9TZxIrxDme3hzzS8zD+goH2J",
	"9y6nB7F9OeC/Q1ioiTthXkyFR+F3vT/R2WaeImay4ir33rhhmnLw4DxKh7KtZHpzcpl+GZ2n19ej39dI",
	"ZtoW4OmQlla0PBZGgsfDyF4ZUDtybEE5YOGLlKXgCRFZlVjhCDT5i4kNX48lOk+EYrLkISAgzoCqqhsK",
	"JIITl+tS8vAMFn1pFfK1iPt9eNd/2x23AAesNfjQ6bbg/dtBqweYvc0+vBtgv7cn5FLwHaHOE2rAQoH+",
	"32xMEUyr7qcJVVAEDp+vTls3385aja8fv39fDHOb6g/Y8K9FWHP7n5ThEHYBv7Xi4D/Vh4a6UEwXgXit",
	"Ccdwj56OafGEPpZoZ+cAO/r55/DwRGe/RF7BbeAIREG4ADImqb2mQQo5WgmKN6wj/JK0Co5WCe7QnEYZ",
	"o+R8BH5Z5eGTtdpe1v+Fv5hWHlUsAzBGChZppfdOx2wvfRirDVovKkQMOPEkPBbx8MZiRof0p3S5kqSV",
	"uUujWzpfpA6shRmteD6WwiKnw9sG9G5xTY/vkfkqoPWsjtQUpOBEKFN64spAHXk7uDivEhvziuofiDUM",
	"v4MjPV991lcjjtCHxHtVsqD9WSlJoBad0GRj31sT+z08a4t0fQpVDbdHRQ9C2jZbx1xq6kFY9fVtjE11",
	"OQZwQ/n2gDdCcxRsNJrHh6srIUBUZb8lCV9zJLHWic/BE81YaS1y8pQLietjXrhGwYJErNdlgc7BBNdH",
	"QKY1eULlyZPVcaBsi9VGsS06Ri4yClJ+yejwdrMTBH+t/JnmuFXlgu+o8bvNEj/ZlMR5QiPcVv5ONX9d",
	"RLu9/iCkDLxHG6z+vO20Ptw9D+Zvdm9pQmW6UQlgMQ9YgJB0SLmYCAnj36Zq0laSbnXn18VCWmj2QD5e",
	"XpCTi1EY/vjdaFcvAOVYCiZnBKYQ0CTGiz6cHOn3Wr92QwRSMKz1qpb7T9cXZ6TbDmtnaeXKVo6lkW0s",
	"0267l6JKo9oIH6P/o+FReW28nFyMaEKnaF1FvNvutDvBThtUYERYgNuddr9KXB4fPV1LMsbemOCOxeEy",
	"7tOOgJRkw4YU4FkeStoZZGG75QS8t2JcenQh7IWqjXgYy0LxRsdlvUWsbtG3u6tweSVdTuR58urll1Xi",
	"ePNKDQ41XIrwcZ6iPh5usinPdxtLQq/T2dfdi3vpnuE6T+jgEPN9i0jUzbIowM7q19+qoPFspWKqjnVo",
	"p005LDtjmKZSM5C5dn74vvO+k067dH43/ysAAP//VW4JwCwRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://gitlab.com/digilab.overheid.nl/ecosystem/fsc-vwl-api/-/raw/main/spec/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
